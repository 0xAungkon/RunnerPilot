version: '3.8'

services:
  # Frontend - React application built with Vite
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: runner-pilot-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - runner-pilot-network
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx - Reverse proxy serving frontend on "/" and backend on "/api"
  nginx:
    image: nginx:alpine
    container_name: runner-pilot-nginx
    restart: unless-stopped
    ports:
      - "3002:80"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - runner-pilot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backend - FastAPI application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: runner-pilot-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # FastAPI Configuration
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=info
      
      # Database Configuration
      - DATABASE_URL=sqlite:///./app/volumn/db.sqlite3
      
      # Runner Configuration
      - VOLUME_PATH=/app/volumn
      
      # CORS Configuration
      - ALLOWED_ORIGINS=["*"]
      - ADMIN_EMAIL=admin@gmail.com
      - ADMIN_PASSWORD=admin123
      - SECRET_KEY=supersecretkey123
      - ENVIRONMENT=development

    volumes:
      # Mount docker socket for Docker operations
      - /var/run/docker.sock:/var/run/docker.sock
      
      # Mount volume for runner data persistence
      - runner-data:/app/volumn
    
    networks:
      - runner-pilot-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  runner-data:
    driver: local

networks:
  runner-pilot-network:
    driver: bridge
