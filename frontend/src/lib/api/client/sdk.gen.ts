// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CloneInstanceRunnersInstanceInstanceIdClonePostData, CloneInstanceRunnersInstanceInstanceIdClonePostErrors, CloneInstanceRunnersInstanceInstanceIdClonePostResponses, CreateInstanceRunnersInstancePostData, CreateInstanceRunnersInstancePostErrors, CreateInstanceRunnersInstancePostResponses, CreateMetaMetaPostData, CreateMetaMetaPostErrors, CreateMetaMetaPostResponses, DeleteCachedReleaseRunnersReleaseVersionDeleteData, DeleteCachedReleaseRunnersReleaseVersionDeleteErrors, DeleteCachedReleaseRunnersReleaseVersionDeleteResponses, DeleteInstanceRunnersInstanceInstanceIdDeleteData, DeleteInstanceRunnersInstanceInstanceIdDeleteErrors, DeleteInstanceRunnersInstanceInstanceIdDeleteResponses, ExecuteCommandRunnersInstanceInstanceIdCommandPostData, ExecuteCommandRunnersInstanceInstanceIdCommandPostErrors, ExecuteCommandRunnersInstanceInstanceIdCommandPostResponses, GetInstanceLogsRunnersInstanceInstanceIdLogsGetData, GetInstanceLogsRunnersInstanceInstanceIdLogsGetErrors, GetInstanceLogsRunnersInstanceInstanceIdLogsGetResponses, GetMetaMetaKeyGetData, GetMetaMetaKeyGetErrors, GetMetaMetaKeyGetResponses, GetReleasesRunnersReleaseGetData, GetReleasesRunnersReleaseGetResponses, ListInstancesRunnersInstanceGetData, ListInstancesRunnersInstanceGetResponses, ListMetaMetaGetData, ListMetaMetaGetResponses, LoginAuthLoginPostData, LoginAuthLoginPostErrors, LoginAuthLoginPostResponses, MeCommonMeGetData, MeCommonMeGetResponses, PullRunnerRunnersReleasePostData, PullRunnerRunnersReleasePostErrors, PullRunnerRunnersReleasePostResponses, RebuildInstanceRunnersInstanceInstanceIdRebuildPostData, RebuildInstanceRunnersInstanceInstanceIdRebuildPostErrors, RebuildInstanceRunnersInstanceInstanceIdRebuildPostResponses, StartInstanceRunnersInstanceInstanceIdStartPostData, StartInstanceRunnersInstanceInstanceIdStartPostErrors, StartInstanceRunnersInstanceInstanceIdStartPostResponses, StopInstanceRunnersInstanceInstanceIdStopPostData, StopInstanceRunnersInstanceInstanceIdStopPostErrors, StopInstanceRunnersInstanceInstanceIdStopPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Me
 */
export const meCommonMeGet = <ThrowOnError extends boolean = false>(options?: Options<MeCommonMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<MeCommonMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/common/me',
        ...options
    });
};

/**
 * List Meta
 */
export const listMetaMetaGet = <ThrowOnError extends boolean = false>(options?: Options<ListMetaMetaGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListMetaMetaGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meta/',
        ...options
    });
};

/**
 * Create Meta
 */
export const createMetaMetaPost = <ThrowOnError extends boolean = false>(options: Options<CreateMetaMetaPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateMetaMetaPostResponses, CreateMetaMetaPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meta/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Meta
 */
export const getMetaMetaKeyGet = <ThrowOnError extends boolean = false>(options: Options<GetMetaMetaKeyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetMetaMetaKeyGetResponses, GetMetaMetaKeyGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meta/{key}',
        ...options
    });
};

/**
 * Get Releases
 */
export const getReleasesRunnersReleaseGet = <ThrowOnError extends boolean = false>(options?: Options<GetReleasesRunnersReleaseGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReleasesRunnersReleaseGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/release',
        ...options
    });
};

/**
 * Pull Runner
 *
 * Download a specific runner release by version.
 * Streams download progress as JSON lines.
 */
export const pullRunnerRunnersReleasePost = <ThrowOnError extends boolean = false>(options: Options<PullRunnerRunnersReleasePostData, ThrowOnError>) => {
    return (options.client ?? client).post<PullRunnerRunnersReleasePostResponses, PullRunnerRunnersReleasePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/release',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Cached Release
 *
 * Delete a downloaded runner release by version.
 * Removes all files matching the version name from the releases directory.
 */
export const deleteCachedReleaseRunnersReleaseVersionDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCachedReleaseRunnersReleaseVersionDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCachedReleaseRunnersReleaseVersionDeleteResponses, DeleteCachedReleaseRunnersReleaseVersionDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/release/{version}',
        ...options
    });
};

/**
 * List Instances
 *
 * List all runner instances.
 */
export const listInstancesRunnersInstanceGet = <ThrowOnError extends boolean = false>(options?: Options<ListInstancesRunnersInstanceGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListInstancesRunnersInstanceGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance',
        ...options
    });
};

/**
 * Create Instance
 *
 * Create a new runner instance.
 */
export const createInstanceRunnersInstancePost = <ThrowOnError extends boolean = false>(options: Options<CreateInstanceRunnersInstancePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateInstanceRunnersInstancePostResponses, CreateInstanceRunnersInstancePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Instance
 *
 * Delete a runner instance by ID.
 */
export const deleteInstanceRunnersInstanceInstanceIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteInstanceRunnersInstanceInstanceIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteInstanceRunnersInstanceInstanceIdDeleteResponses, DeleteInstanceRunnersInstanceInstanceIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}',
        ...options
    });
};

/**
 * Clone Instance
 *
 * Clone/setup a runner instance.
 */
export const cloneInstanceRunnersInstanceInstanceIdClonePost = <ThrowOnError extends boolean = false>(options: Options<CloneInstanceRunnersInstanceInstanceIdClonePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CloneInstanceRunnersInstanceInstanceIdClonePostResponses, CloneInstanceRunnersInstanceInstanceIdClonePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}/clone',
        ...options
    });
};

/**
 * Get Instance Logs
 *
 * Get logs for a runner instance.
 */
export const getInstanceLogsRunnersInstanceInstanceIdLogsGet = <ThrowOnError extends boolean = false>(options: Options<GetInstanceLogsRunnersInstanceInstanceIdLogsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInstanceLogsRunnersInstanceInstanceIdLogsGetResponses, GetInstanceLogsRunnersInstanceInstanceIdLogsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}/logs',
        ...options
    });
};

/**
 * Rebuild Instance
 *
 * Rebuild a runner instance.
 */
export const rebuildInstanceRunnersInstanceInstanceIdRebuildPost = <ThrowOnError extends boolean = false>(options: Options<RebuildInstanceRunnersInstanceInstanceIdRebuildPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RebuildInstanceRunnersInstanceInstanceIdRebuildPostResponses, RebuildInstanceRunnersInstanceInstanceIdRebuildPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}/rebuild',
        ...options
    });
};

/**
 * Start Instance
 *
 * Start a runner instance.
 */
export const startInstanceRunnersInstanceInstanceIdStartPost = <ThrowOnError extends boolean = false>(options: Options<StartInstanceRunnersInstanceInstanceIdStartPostData, ThrowOnError>) => {
    return (options.client ?? client).post<StartInstanceRunnersInstanceInstanceIdStartPostResponses, StartInstanceRunnersInstanceInstanceIdStartPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}/start',
        ...options
    });
};

/**
 * Stop Instance
 *
 * Stop a runner instance.
 */
export const stopInstanceRunnersInstanceInstanceIdStopPost = <ThrowOnError extends boolean = false>(options: Options<StopInstanceRunnersInstanceInstanceIdStopPostData, ThrowOnError>) => {
    return (options.client ?? client).post<StopInstanceRunnersInstanceInstanceIdStopPostResponses, StopInstanceRunnersInstanceInstanceIdStopPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}/stop',
        ...options
    });
};

/**
 * Execute Command
 *
 * Execute a command on a runner instance.
 * Streams command output as JSON lines.
 */
export const executeCommandRunnersInstanceInstanceIdCommandPost = <ThrowOnError extends boolean = false>(options: Options<ExecuteCommandRunnersInstanceInstanceIdCommandPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ExecuteCommandRunnersInstanceInstanceIdCommandPostResponses, ExecuteCommandRunnersInstanceInstanceIdCommandPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runners/instance/{instance_id}/command',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
