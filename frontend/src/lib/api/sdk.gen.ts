// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ClearInstanceLogsRunnerInstanceIdLogsClearPostData, ClearInstanceLogsRunnerInstanceIdLogsClearPostErrors, ClearInstanceLogsRunnerInstanceIdLogsClearPostResponses, CloneInstanceRunnerInstanceIdClonePostData, CloneInstanceRunnerInstanceIdClonePostErrors, CloneInstanceRunnerInstanceIdClonePostResponses, CreateInstanceRunnerPostData, CreateInstanceRunnerPostErrors, CreateInstanceRunnerPostResponses, CreateMetaMetaPostData, CreateMetaMetaPostErrors, CreateMetaMetaPostResponses, DeleteInstanceRunnerInstanceIdDeleteData, DeleteInstanceRunnerInstanceIdDeleteErrors, DeleteInstanceRunnerInstanceIdDeleteResponses, GetInstanceLogsRunnerInstanceIdLogsGetData, GetInstanceLogsRunnerInstanceIdLogsGetErrors, GetInstanceLogsRunnerInstanceIdLogsGetResponses, GetMetaMetaKeyGetData, GetMetaMetaKeyGetErrors, GetMetaMetaKeyGetResponses, GetPrerequisitesSystemPrerequisitesGetData, GetPrerequisitesSystemPrerequisitesGetResponses, ListInstancesRunnerGetData, ListInstancesRunnerGetResponses, ListMetaMetaGetData, ListMetaMetaGetResponses, LoginAuthLoginPostData, LoginAuthLoginPostErrors, LoginAuthLoginPostResponses, MeCommonMeGetData, MeCommonMeGetResponses, RestartInstanceRunnerInstanceIdRestartPostData, RestartInstanceRunnerInstanceIdRestartPostErrors, RestartInstanceRunnerInstanceIdRestartPostResponses, SetupSystemSystemSetupPostData, SetupSystemSystemSetupPostResponses, StartInstanceRunnerInstanceIdStartPostData, StartInstanceRunnerInstanceIdStartPostErrors, StartInstanceRunnerInstanceIdStartPostResponses, StopInstanceRunnerInstanceIdStopPostData, StopInstanceRunnerInstanceIdStopPostErrors, StopInstanceRunnerInstanceIdStopPostResponses, UpdateInstanceRunnerInstanceIdPutData, UpdateInstanceRunnerInstanceIdPutErrors, UpdateInstanceRunnerInstanceIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Me
 */
export const meCommonMeGet = <ThrowOnError extends boolean = false>(options?: Options<MeCommonMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<MeCommonMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/common/me',
        ...options
    });
};

/**
 * Get Prerequisites
 *
 * Check system prerequisites for RunnerPilot.
 *
 * Returns:
 * - checks: List of individual prerequisite checks with status, message, and mandatory flag
 * - status: True if all mandatory checks pass, False otherwise
 */
export const getPrerequisitesSystemPrerequisitesGet = <ThrowOnError extends boolean = false>(options?: Options<GetPrerequisitesSystemPrerequisitesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPrerequisitesSystemPrerequisitesGetResponses, unknown, ThrowOnError>({
        url: '/system/prerequisites',
        ...options
    });
};

/**
 * Setup System
 *
 * Setup the system by:
 * 1. Validating all prerequisites
 * 2. Downloading the latest runner image
 * 3. Pulling the ubuntu:latest Docker image
 *
 * Returns streaming JSON lines with progress updates.
 */
export const setupSystemSystemSetupPost = <ThrowOnError extends boolean = false>(options?: Options<SetupSystemSystemSetupPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetupSystemSystemSetupPostResponses, unknown, ThrowOnError>({
        url: '/system/setup',
        ...options
    });
};

/**
 * List Meta
 */
export const listMetaMetaGet = <ThrowOnError extends boolean = false>(options?: Options<ListMetaMetaGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListMetaMetaGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meta/',
        ...options
    });
};

/**
 * Create Meta
 */
export const createMetaMetaPost = <ThrowOnError extends boolean = false>(options: Options<CreateMetaMetaPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateMetaMetaPostResponses, CreateMetaMetaPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meta/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Meta
 */
export const getMetaMetaKeyGet = <ThrowOnError extends boolean = false>(options: Options<GetMetaMetaKeyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetMetaMetaKeyGetResponses, GetMetaMetaKeyGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meta/{key}',
        ...options
    });
};

/**
 * List Instances
 *
 * List all runner instances.
 */
export const listInstancesRunnerGet = <ThrowOnError extends boolean = false>(options?: Options<ListInstancesRunnerGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListInstancesRunnerGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner',
        ...options
    });
};

/**
 * Create Instance
 *
 * Create a new runner instance.
 */
export const createInstanceRunnerPost = <ThrowOnError extends boolean = false>(options: Options<CreateInstanceRunnerPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateInstanceRunnerPostResponses, CreateInstanceRunnerPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Instance
 *
 * Delete a runner instance and its container.
 */
export const deleteInstanceRunnerInstanceIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteInstanceRunnerInstanceIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteInstanceRunnerInstanceIdDeleteResponses, DeleteInstanceRunnerInstanceIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}',
        ...options
    });
};

/**
 * Update Instance
 *
 * Update a runner instance (token only).
 */
export const updateInstanceRunnerInstanceIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateInstanceRunnerInstanceIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateInstanceRunnerInstanceIdPutResponses, UpdateInstanceRunnerInstanceIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Clone Instance
 *
 * Clone/setup multiple runner instances based on count.
 */
export const cloneInstanceRunnerInstanceIdClonePost = <ThrowOnError extends boolean = false>(options: Options<CloneInstanceRunnerInstanceIdClonePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CloneInstanceRunnerInstanceIdClonePostResponses, CloneInstanceRunnerInstanceIdClonePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}/clone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Instance Logs
 *
 * Stream logs for a runner instance from the docker container in real-time.
 */
export const getInstanceLogsRunnerInstanceIdLogsGet = <ThrowOnError extends boolean = false>(options: Options<GetInstanceLogsRunnerInstanceIdLogsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInstanceLogsRunnerInstanceIdLogsGetResponses, GetInstanceLogsRunnerInstanceIdLogsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}/logs',
        ...options
    });
};

/**
 * Start Instance
 *
 * Start a runner instance.
 */
export const startInstanceRunnerInstanceIdStartPost = <ThrowOnError extends boolean = false>(options: Options<StartInstanceRunnerInstanceIdStartPostData, ThrowOnError>) => {
    return (options.client ?? client).post<StartInstanceRunnerInstanceIdStartPostResponses, StartInstanceRunnerInstanceIdStartPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}/start',
        ...options
    });
};

/**
 * Stop Instance
 *
 * Stop a runner instance (container remains for restart).
 */
export const stopInstanceRunnerInstanceIdStopPost = <ThrowOnError extends boolean = false>(options: Options<StopInstanceRunnerInstanceIdStopPostData, ThrowOnError>) => {
    return (options.client ?? client).post<StopInstanceRunnerInstanceIdStopPostResponses, StopInstanceRunnerInstanceIdStopPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}/stop',
        ...options
    });
};

/**
 * Restart Instance
 *
 * Restart a runner instance (stop and start).
 */
export const restartInstanceRunnerInstanceIdRestartPost = <ThrowOnError extends boolean = false>(options: Options<RestartInstanceRunnerInstanceIdRestartPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RestartInstanceRunnerInstanceIdRestartPostResponses, RestartInstanceRunnerInstanceIdRestartPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}/restart',
        ...options
    });
};

/**
 * Clear Instance Logs
 *
 * Clear/truncate logs for a runner instance container.
 */
export const clearInstanceLogsRunnerInstanceIdLogsClearPost = <ThrowOnError extends boolean = false>(options: Options<ClearInstanceLogsRunnerInstanceIdLogsClearPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ClearInstanceLogsRunnerInstanceIdLogsClearPostResponses, ClearInstanceLogsRunnerInstanceIdLogsClearPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/runner/{instance_id}/logs/clear',
        ...options
    });
};
